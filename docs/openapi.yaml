openapi: 3.0.0
info:
  version: 0.0.1
  title: 'dating-app-like Swagger Docs'
  description: 'Dating app like'
servers:
  - description: SwaggerHub API Auto Mocking
    url: 'https://virtserver.swaggerhub.com/Xendit/service-level-test-example/0.0.1'
  - description: Local development
    url: 'http://localhost:3001'
paths:
  /:
    get:
      tags:
        - root
      operationId: getRoot
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Root'
  /healthcheck/liveness:
    get:
      tags:
        - healthcheck
      operationId: getLiveness
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthcheck'
  /healthcheck/readiness:
    get:
      tags:
        - healthcheck
      operationId: getReadiness
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthcheck'
  /users:
    post:
      description: Create a user
      tags:
        - user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        201:
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        422:
          description: Duplicate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error422Response'
  /users/verify:
    get:
      description: Verify user activation code
      tags:
        - user
      operationId: verifyUser
      parameters:
        - name: code
          in: query
          description: User activation code
          required: true
          schema:
            type: string
      responses:
        200:
          description: User activation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyUserResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        404:
          description: User not found or verification code invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        409:
          description: User is already active
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409Response'
        410:
          description: Verification code is expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error410Response'
  /errors/{error_code}:
    get:
      tags:
        - error
      operationId: getErrorExample
      parameters:
        - name: error_code
          in: path
          description: Error HTTP code
          required: true
          schema:
            type: string
            enum: ['200', '400', '403', '404','409', '410', '422', '500']
      responses:
        200:
          description: default response, instruction to use this endpoint
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        403:
          description: example error 403 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403Response'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        409:
          description: example error 409 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409Response'
        410:
          description: example error 410 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error410Response'
        422:
          description: example error 422 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error422Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
components:
  schemas:
    AnyJSONValue:
      description: 'Any JSON Value'
    Root:
      type: object
      properties:
        message:
          type: string
    Healthcheck:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          example: 'OK'
    Error400Response:
      type: object
      required:
        - error_code
        - message
      properties:
        error_code:
          type: string
          enum:
            - API_VALIDATION_ERROR
        message:
          type: string
        errors:
          $ref: '#/components/schemas/ArrayOfErrors'
    Error403Response:
      type: object
      required:
        - error_code
        - message
      properties:
        error_code:
          type: string
          enum:
            - REQUEST_FORBIDDEN_ERROR
        message:
          type: string
        errors:
          $ref: '#/components/schemas/ArrayOfErrors'
    Error404Response:
      type: object
      required:
        - error_code
        - message
      properties:
        error_code:
          type: string
          enum:
            - USER_NOT_FOUND
        message:
          type: string
        errors:
          $ref: '#/components/schemas/ArrayOfErrors'
    Error409Response:
      type: object
      required:
        - error_code
        - message
      properties:
        error_code:
          type: string
          enum:
            - CONFLICT
        message:
          type: string
        errors:
          $ref: '#/components/schemas/ArrayOfErrors'
    Error410Response:
      type: object
      required:
        - error_code
        - message
      properties:
        error_code:
          type: string
          enum:
            - CODE_EXPIRED
        message:
          type: string
        errors:
          $ref: '#/components/schemas/ArrayOfErrors'
    Error422Response:
      type: object
      required:
        - error_code
        - message
      properties:
        error_code:
          type: string
          enum: 
            - UNPROCESSABLE
        message:
          type: string
        errors:
          $ref: '#/components/schemas/ArrayOfErrors'
    Error500Response:
      type: object
      required:
        - error_code
        - message
      properties:
        error_code:
          type: string
          enum:
            - INTERNAL_SERVER_ERROR
        message:
          type: string
        errors:
          $ref: '#/components/schemas/ArrayOfErrors'
    ArrayOfErrors:
      nullable: true
      type: array
      items:
        oneOf:
          - type: string
          - type: object
    User:
      type: object
      required:
        - id
        - first_name
        - last_name
        - email
      properties:
        id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time
          description: 'Date and time when the user was created'
        updated_at:
          type: string
          format: date-time
          description: 'Date and time when the user was updated'
        is_active:
          type: boolean
          description: Indicates whether the user is active or not
    UserCreateRequest:
      type: object
      required:
        - first_name
        - last_name
        - email
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
    VerifyUserResponse:
      type: object
      properties:
        message:
          type: string
          description: Message indicating successful user activation